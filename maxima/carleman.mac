C(v) := block([x:gensym(), f, g, m, n:length(v), j, k, mt:maxtayorder],
          maxtayorder: false,
          f: taylor(sum( v[k+1] * (x^k), k, 0, n-1), x, 0, n-1),
          m: ident(n), g: f,
          for k:1 thru n do (m[2, k]: v[k]),
          for j:3 thru n do (g:g*f, (for k:1 thru n do m[j,k]:coeff(g, x, k-1))),
          maxtayorder:mt, m)$

V(m) := block([i, l:m[2,2], n:length(m), v, j, k],
          v:ident(n),
          for j:1 thru n-2 do (
            for k:j+1 thru n-1 do (
              v[j+1, k+1]: sum(v[j+1, i+1]*m[i+1, k+1], i, j, k-1)
                / ( l^j - l^k))),
          v)$

Vi(m) := block([i, l:m[2,2], n:length(m), v, j, k],
          v:ident(n),
          for k:1 thru n-1 do (
            for j:k-1 thru 1 step -1 do (
              v[j+1, k+1]: -sum(v[i+1, k+1]*m[j+1, i+1], i, j+1, k)
                / ( l^j - l^k))),
          v)$

Cdiag(m) := [ Vi(m), m[2,2], V(m) ] $

/* apply(Cpack, Cdiag(a))   -->   return a */
Cpack(vi, l, v) := vi . apply(diag_matrix,
                              makelist(l^k, k, 0, length(v)-1)) . v$

Cpack_vec(vi, l, v) := list_matrix_entries(row(Cpack(vi, l, v), 2))$
